import java.awt.AlphaComposite;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.TreeMap;



// main class to run compression and decompression algorithms
// runs Huffman compression and decompression by creating objects of type HuffmanTree and Compress
// can handle the store count format and store tree format
public class SimpleHuffProcessor implements IHuffProcessor {

	private IHuffViewer myViewer;
	private int header;
	private HuffmanTree huff;
	private int bitsSaved;
	private Compress c;

	//compresses given file if the compression would save bits or if forced to
	//returns number of bits in compressed file
	public int compress(InputStream in, OutputStream out, boolean force) throws IOException {
		if (bitsSaved > 0 || force) {
			BitInputStream bitIn = new BitInputStream(in);
			BitOutputStream bitOut = new BitOutputStream(out);
			bitOut.writeBits(32, MAGIC_NUMBER);
			bitOut.writeBits(32, header); 
			c.writeHeader(header, bitOut);
			c.writeData(bitIn, bitOut);
			bitIn.close();
			bitOut.close();
			return ((huff.getFrequency()-1) * BITS_PER_WORD) - bitsSaved;
		} else {
			myViewer.showError("compressed file is larger than original file");
			return -1;
		}
	}

	//runs before compress method
	//returns number of bits saved if compression were to happen
	public int preprocessCompress(InputStream in, int headerFormat) throws IOException {
		if (headerFormat == IHuffConstants.STORE_CUSTOM) {
			throw new IllegalArgumentException("Custom format for Huffman Compression not implemented");
		}
		BitInputStream bitIn = new BitInputStream(in);
		header = headerFormat;
		huff = new HuffmanTree(bitIn);
		c = new Compress(huff);
		int original = (huff.getFrequency() - 1) * BITS_PER_WORD; //number of bits originally in given file

		//compressed = headerBits + dataBits + magic number(32) + header format(32)
		int compressed = c.getHeaderBits(headerFormat) + c.getDataBits() + (2*BITS_PER_INT);
		bitsSaved = original - compressed;
		bitIn.close();
		return bitsSaved;
	}

	//method to uncompress given inputStream 
	//returns number of bits in original file
	public int uncompress(InputStream in, OutputStream out) throws IOException {
		BitInputStream bitIn = new BitInputStream(in);
		BitOutputStream bitOut = new BitOutputStream(out);
		if(bitIn.readBits(IHuffConstants.BITS_PER_INT) == MAGIC_NUMBER) { //checks if inputStream was compressed by this compress method
			header = bitIn.readBits(IHuffConstants.BITS_PER_INT);
			if(header == STORE_COUNTS) {
				huff = new HuffmanTree(bitIn, STORE_COUNTS);
			} else if(header == STORE_TREE) {
				huff = new HuffmanTree(bitIn, STORE_TREE);
			} else if (header == IHuffConstants.STORE_CUSTOM) {
				bitIn.close();
				bitOut.close();
				throw new IllegalArgumentException("Custom format for Huffman Compression not implemented");
			}
			c = new Compress(huff);
			int original = c.writeDataBack(bitIn, bitOut);
			bitIn.close();
			bitOut.close();
			return original;
		} else {
			bitIn.close();
			bitOut.close();
			myViewer.showError("not our file");
			return -1;
		}
	}

	public void setViewer(IHuffViewer viewer) {
		myViewer = viewer;
	}

	private void showString(String s){
		if(myViewer != null)
			myViewer.update(s);
	}
}
